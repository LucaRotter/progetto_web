name: CI/CD Pipeline

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: Progetto_web
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: ðŸ“„ Crea file .env
        run: |
          cat <<EOF > .env
          PG_USER=postgres
          PG_HOST=db
          PG_DATABASE=Progetto_web
          PG_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          PG_PORT=5432
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          APP_PASSWORD=${{ secrets.APP_PASSWORD }}
          EOF
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Aspetta che Postgres sia pronto
        run: |
          echo "Aspetto che Postgres risponda..."
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "Postgres Ã¨ pronto!"
              exit 0
            fi
            echo "Tentativo $i fallito, riprovo tra 3s..."
            sleep 3
          done
          echo "Postgres non risponde dopo 10 tentativi!"
          exit 1 
      - name: Avvia Docker Compose
        run: docker compose -f docker-compose.yml up -d

      - name: Aspetta che il backend sia pronto
        run: |
          echo "Aspetto che il backend risponda..."
          for i in {1..10}; do
            if curl --fail http://localhost:8000/health; then
              echo "Il backend Ã¨ pronto!"
              exit 0
            fi
            echo "Tentativo $i fallito, riprovo tra 3s..."
            sleep 3
          done
          echo "Il backend non risponde dopo 10 tentativi!"
          exit 1
      - name: Inizializza il database manualmente
        run: |
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U postgres -d Progetto_web -f ./init/init_database.sql
      - name: Esegui test backend CRUD
        run: |
          set -e
          cd backend
          npm install
          npm test
        env:
          PG_USER: postgres
          PG_HOST: localhost
          PG_DATABASE: Progetto_web
          PG_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          PG_PORT: 5432

          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

          SECRET_KEY_STRIPE: ${{ secrets.STRIPE_SECRET_KEY }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          APP_PASSWORD: ${{ secrets.APP_PASSWORD }}

      - name: Log container falliti
        if: failure()
        run: docker compose -f docker-compose.yml logs

      - name: Ferma i container
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans