name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: progetto_web
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Avvia Docker Compose
        run: docker compose -f docker-compose.yml up -d

      - name: üìã Log container falliti
        if: failure()
        run: docker compose -f ${{ github.workspace }}/docker-compose.yml up -d

      - name: ‚è≥ Aspetta che il backend sia pronto
        run: |
          echo "Aspetto che il backend risponda..."
          sleep 10
          curl --fail http://localhost:8000 || (echo "‚ùå Il backend non risponde!" && exit 1)

      - name: üß™ Esegui test backend CRUD
        run: |
          cd backend
          npm install
          npm test
        env:
          PG_USER: postgres
          PG_HOST: db
          PG_DATABASE: progetto_web
          PG_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          PG_PORT: 5432

          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          APP_PASSWORD: ${{ secrets.APP_PASSWORD }}

      - name: üßπ Ferma i container
        run: docker compose -f docker-compose.yml down --volumes --remove-orphans
